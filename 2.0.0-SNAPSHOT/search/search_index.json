{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"Kache   ![Kache](https://img.shields.io/badge/ache-blue?logo=kotlin) [![GitHub stars](https://img.shields.io/github/stars/MayakaApps/LruKache)](https://github.com/MayakaApps/LruKache/stargazers) [![GitHub license](https://img.shields.io/github/license/MayakaApps/LruKache)](https://github.com/MayakaApps/LruKache/blob/main/LICENSE) ![Maven Central](https://img.shields.io/maven-central/v/com.mayakapps.kache/kache) ![Sonatype Nexus (Snapshots)](https://img.shields.io/nexus/s/com.mayakapps.kache/kache?server=https%3A%2F%2Fs01.oss.sonatype.org) [![Twitter](https://img.shields.io/twitter/url?style=social&amp;url=https%3A%2F%2Fgithub.com%2FMayakaApps%2FKache)](https://twitter.com/intent/tweet?text=Kache%20is%20a%20lightweight%20caching%20library%20for%20Kotlin%20Multiplatform.%20Check%20it%20out.&amp;url=https%3A%2F%2Fgithub.com%2FMayakaApps%2FKache)   <p>Kache (previously Kotlinized LRU Cache) is a lightweight Kotlin Multiplatform caching library that supports both in-memory and persistent caches and supports different eviction strategies (LRU, FIFO, MRU, FILO).</p> <p>Supported platforms: * JVM (and Android) * JS (Browser does not support persistent cache) * macOS (macosX64, macosArm64) * iOS (iosArm64, iosX64, iosSimulatorArm64) * watchOS (watchosArm32, watchosArm64, watchosX64, watchosSimulatorArm64) * tvOS (tvosArm64, tvosX64, tvosSimulatorArm64) * Linux (linuxX64) * Windows (mingwX64)</p>"},{"location":"#why-use-kache","title":"Why use Kache?","text":"<ul> <li>Kotlin Multiplatform. Use the same code for Android, iOS, and other platforms.</li> <li>In-memory and persistent caches. Use the same API for both in-memory and persistent caches.</li> <li>Different eviction strategies. Use any common strategy: LRU, FIFO, MRU, or FILO.</li> <li>Coroutine-friendly. Get rid of blocking implementations.</li> <li>Simple and modern API that helps you do almost whatever you want using a single call.</li> </ul>"},{"location":"#setup-gradle","title":"Setup (Gradle)","text":"<p>Kotlin DSL:</p> <pre><code>repositories {\nmavenCentral()\n\n// Add only if you're using snapshot version\nmaven(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n}\n\ndependencies {\n// For in-memory cache\nimplementation(\"com.mayakapps.kache:kache:&lt;version&gt;\")\n\n// For persistent cache (in non-Okio projects)\nimplementation(\"com.mayakapps.kache:file-kache:&lt;version&gt;\")\n\n// For persistent cache (in Okio projects)\nimplementation(\"com.mayakapps.kache:file-kache-okio:&lt;version&gt;\")\n}\n</code></pre> <p>Groovy DSL:</p> <pre><code>repositories {\nmavenCentral()\n\n// Add only if you're using snapshot version\nmaven { url \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" }\n}\n\ndependencies {\n// For in-memory cache\nimplementation \"com.mayakapps.kache:kache:&lt;version&gt;\"\n\n// For persistent cache (in non-Okio projects)\nimplementation \"com.mayakapps.kache:file-kache:&lt;version&gt;\"\n\n// For persistent cache (in Okio projects)\nimplementation \"com.mayakapps.kache:file-kache-okio:&lt;version&gt;\"\n}\n</code></pre> <p>Don't forget to replace <code>&lt;version&gt;</code> with the latest found on the badges above or the desired version.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can create your cache using the following builder DSL, then you can use the usual operators of get, put, and remove and their different implementations.</p> <p>Sample Code (<code>Kache</code>):</p> <pre><code>val cache = Kache&lt;String, ByteArray&gt;(maxSize = 5 * 1024 * 1024) {  // 5 MB\n// Other optional configurations\nstrategy = KacheStrategy.LRU\n// ...\n}\n\n// ...\n\nval newValue = cache.put(uniqueKey) {\ntry {\n// Some CPU-intensive process - Returning a not null value means success\n} catch (ex: Throwable) {\n// Handle exception\nnull // returning null means creating the value has failed - The value (null) will not be cached\n}\n}\n\n// ...\n\nval cachedValue = cache.get(uniqueKey)\n</code></pre> <p>Sample Code (<code>FileKache</code>):</p> <pre><code>// Could be OkioFileKache or JavaFileKache\nval cache = FileKache(directoryPath = \"cache\", maxSize = 10 * 1024 * 1024) {\n// Other optional configurations\nstrategy = KacheStrategy.MRU\n// ...\n}\n\n// ...\n\nval imageData = cache.getOrPut(uniqueKey) { cacheFilename -&gt;\ntry {\n// downloadFromInternet(imageUrl, cacheFilename)\ntrue // returning true means caching has succeeded - The file will be kept\n} catch (ex: IOException) {\n// Handle exception\nfalse // returning false means caching has failed - The file will be deleted\n}\n}\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>See documentation here</p>"},{"location":"#license","title":"License","text":"<p>This library is distributed under the MIT license. All the code inside this library is licensed under the MIT license except for the code inside the module <code>:collections</code> which is licensed under the Apache 2.0 license or GPL 2.0 with classpath exception.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>All contributions are welcome. If you are reporting an issue, please use the provided template. If you're planning to contribute to the code, please open an issue first describing what feature you're planning to add or what issue you're planning to fix. This allows better discussion and coordination of efforts. You can also check open issues for bugs/features that needs to be fixed/implemented.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>These amazing projects have all credit for establishing the algorithms and base implementation for this project.</p> <ul> <li>Android's LruCache</li> <li>Jake Wharton's DiskLruCache</li> </ul>"}]}